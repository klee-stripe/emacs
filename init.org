-*- eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t) -*-

* Tangling Hook
  There are two main approaches to writing your emacs configuration in
  org-mode:
  - ~org-babel-load-file~. This approach is very simple to implement,
    but has to tangle each file when emacs starts.
  - ~org-babel-tangle~. This approach stores the tangled file on disk,
    but you have to remember to re-tangle after each edit.


  We can use a file-local after-save-hook to do the tangling
  automatically. However, this file variable is not considered safe by
  default, so emacs will prompt you the first time you open this
  file.

  #+BEGIN_SRC emacs-lisp :tangle yes
    (setq safe-local-variable-values '((eval add-hook 'after-save-hook
                                             (lambda nil (org-babel-tangle))
                                             nil t)))
  #+END_SRC
** Further Reading
   - https://www.reddit.com/r/emacs/comments/372nxd/
* straight.el
  #+BEGIN_SRC emacs-lisp :tangle yes
    (let ((bootstrap-file (concat user-emacs-directory "straight/bootstrap.el"))
          (bootstrap-version 2))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    (setq use-package-always-ensure t)
    (straight-use-package 'use-package)
  #+END_SRC
* no-littering
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package no-littering
      :demand t)
  #+END_SRC
* general
  I use SPC and DEL as my leaders, since my keyboard puts them under
  my left and right thumbs.

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package general
      :demand t
      :config
      (general-create-definer private/with-leader
                              :prefix "SPC"
                              :non-normal-prefix "M-SPC"
                              :states '(normal visual insert emacs))
      (general-create-definer private/with-local-leader
                              :prefix "DEL"
                              :non-normal-prefix "M-DEL"
                              :states '(normal visual insert emacs)))
  #+END_SRC
* evil
  I never really became fluent in vim, but my brief experience made it
  impossible to go back to any other editing system. The two big
  innovations of vim were:
  - separate modes for binding commands and inserting text
  - composable operators and text objects


  I'm not married to anything specific in vim or evil besides those
  two principles, but nothing really comes close, and I'm not in the
  mood to roll my own version of evil right now.

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package evil
      :demand t
      :diminish 'undo-tree-mode
      :init
      (setq evil-want-Y-yank-to-eol t)
      (setq evil-disable-insert-state-bindings t)
      :config
      (evil-mode t)
      :general
      (:states '(normal visual)
       ";" 'evil-ex
       "s" 'save-buffer
       "x" 'other-window
       "r" 'universal-argument)
      (:keymaps 'universal-argument-map
       "r" 'universal-argument-more)
      (private/with-leader
       "SPC" 'execute-extended-command
       ";" 'eval-expression
       "f" 'find-file
       "b" 'switch-buffer)
      (private/with-leader
       :infix "h"
       "h" 'help-for-help
       "f" 'describe-function
       "v" 'describe-variable
       "k" 'describe-key
       "m" 'describe-mode
       "w" 'where-is)
      (private/with-leader
       :infix "d"
       "h" 'split-window-vertically
       "v" 'split-window-horizontally
       "x" 'delete-window
       "k" 'kill-buffer-and-window))
  #+END_SRC
* ivy, counsel, swiper
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package ivy
      :demand t
      :diminish 'ivy-mode
      :init
      (setq ivy-count-format "(%d/%d) ")
      :config
      (ivy-mode t)
      :general
      (:keymaps 'ivy-minibuffer-map
       "<escape>" 'abort-recursive-edit)
      ([remap switch-buffer] 'ivy-switch-buffer))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package counsel
      :demand t
      :diminish 'counsel-mode
      :config
      (counsel-mode t))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package ivy-hydra
      :commands (hydra-ivy/body))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package wgrep
      :commands (wgrep-change-to-wgrep-mode)
      :init
      (setq wgrep-auto-save-buffer t)
      :general
      (:keymaps 'wgrep-mode-map
       [remap save-buffer] 'wgrep-finish-edit))
  #+END_SRC
* org
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package org
      :init
      (setq org-M-RET-may-split-line nil)
      (setq org-blank-before-new-entry '((heading . nil)
                                         (plain-list-item . nil)))
      (setq org-catch-invisible-edits 'smart)
      (setq org-ellipsis "â¤µ")
      (setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-src-window-setup 'current-window)
      (setq org-file-apps '(("pdf" . system)
                            (auto-mode . emacs)
                            (system . "xdg-open %s")
                            (t . system)))
      :general
      (:states '(insert emacs)
       :keymaps 'org-mode-map
       "RET" 'org-return-indent)
      (private/with-local-leader
       :keymaps 'org-mode-map
       "/" 'counsel-org-goto
       "r" 'org-reveal
       "RET" 'org-open-at-point
       "o" '(lambda (arg)
              (interactive "P")
              (end-of-line)
              (org-insert-heading arg)
              (evil-append nil))
       "O" '(lambda (arg)
              (interactive "P")
              (beginning-of-line)
              (org-insert-heading arg)
              (evil-append nil))))
  #+END_SRC
* General UI
  #+BEGIN_SRC emacs-lisp :tangle yes
    (setq auto-save-default nil)
    (setq auto-save-list-file-prefix nil)
    (setq create-lockfiles nil)
    (setq make-backup-files nil)

    (setq initial-major-mode 'org-mode)
    (setq initial-scratch-message nil)

    (setq-default truncate-lines t)
    (setq visual-line-fringe-indicators '(left-curly-arrow nil))

    (setq echo-keystrokes 0.1)

    (setq sentence-end-double-space nil)

    (setq menu-bar-mode nil)
    (setq tool-bar-mode nil)

    (setq frame-title-format "%b")

    (setq save-interprogram-paste-before-kill t)

    (setq global-hl-line-sticky-flag t)
    (global-hl-line-mode t)
    (show-paren-mode t)

    (setq-default indent-tabs-mode nil)

    (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
  #+END_SRC
* ws-butler
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package ws-butler
      :demand t
      :diminish 'ws-butler-mode
      :init
      (setq ws-butler-keep-whitespace-before-point nil)
      :config
      (ws-butler-global-mode t))
  #+END_SRC
* projectile
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package projectile
      :demand t
      :config
      (projectile-mode t))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package counsel-projectile
      :config
      (counsel-projectile-on)
      :general
      (private/with-leader
       :infix "p"
       "f" 'counsel-projectile
       "/" 'counsel-projectile-rg
       "p" 'counsel-projectile-switch-project))
  #+END_SRC
